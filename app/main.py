import os
import pandas as pd

class OnlineStoreAnalytics:
    def __init__(self, csv_file_path):
        try:
            if not os.path.exists(csv_file_path):
                raise FileNotFoundError(f"Error: File not found at {csv_file_path}")

            self.df = pd.read_csv(csv_file_path)
            self.df['order_date'] = pd.to_datetime(self.df['order_date'])
        except FileNotFoundError as e:
            print(e)
        except Exception as e:
            print(f"Error: {e}")

    def compute_monthly_revenue(self):
        # Extract month from 'order_date' and add it as a new column 'month'
        self.df['month'] = self.df['order_date'].dt.to_period('M')

        # Group by month and calculate the sum of product prices
        monthly_revenue = self.df.groupby('month')['product_price'].sum()

        # Display the result
        print("Total revenue generated by the online store for each month:")
        print(monthly_revenue)
        print()

    def compute_product_revenue(self):
        # Group by product name and calculate the sum of product prices
        product_revenue = self.df.groupby('product_name')['product_price'].sum()

        # Display the result
        print("Total revenue generated by each product:")
        print(product_revenue)
        print()

    def compute_customer_revenue(self):
        # Group by customer ID and calculate the sum of product prices
        customer_revenue = self.df.groupby('customer_id')['product_price'].sum()

        # Get the count of unique customers
        unique_customers = self.df['customer_id'].nunique()

        # Display the result
        print(f"Total revenue generated by {unique_customers} unique customers:")
        print(customer_revenue)
        print()

    def identify_top_customers(self):
        # Group by customer ID and get the top 10 customers by revenue
        top_customers = self.df.groupby('customer_id')['product_price'].sum().nlargest(10)

        # Display the result
        print("Top 10 customers by revenue generated:")
        print(top_customers)
        print()


if __name__ == "__main__":
    try:
        # Replace 'your_csv_file_path' with the actual file path
        csv_file_path = 'app/orders.csv'

        # Create an instance of the OnlineStoreAnalytics class
        online_store_analytics = OnlineStoreAnalytics(csv_file_path)

        # Call methods to perform tasks
        online_store_analytics.compute_monthly_revenue()
        online_store_analytics.compute_product_revenue()
        online_store_analytics.compute_customer_revenue()
        online_store_analytics.identify_top_customers()
    except Exception as e:
        # Handle any unexpected errors gracefully
        print(f"Error: {e}")